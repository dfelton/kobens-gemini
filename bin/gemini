#!/usr/bin/env php
<?php

use Kobens\Core\Cache;
use Kobens\Core\Config;
use Kobens\Core\Db;
use Kobens\Core\EmergencyShutdown;
use Kobens\Core\Http\Request\Throttler;
use Kobens\Core\Http\Request\Throttler\Adapter\MariaDb;
use Kobens\Gemini\Exchange;
use Kobens\Gemini\Api\Host;
use Kobens\Gemini\Api\Key;
use Kobens\Gemini\Api\Nonce;
use Kobens\Gemini\Api\Market\GetPrice;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\FeeAndVolume\GetNotationalVolume;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\FundManagement\GetAvailableBalances;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\CancelAllActiveOrders;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\CancelOrder;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\FillOrKill;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\ForceMaker;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\ImmediateOrCancel;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\Limit;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\MakerOrCancel;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\StopLimit;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderStatus\GetActiveOrders;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderStatus\GetPastTrades;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderStatus\OrderStatus;
use Kobens\Gemini\Api\Rest\PublicEndpoints\Ticker;
use Kobens\Gemini\Api\WebSocket\MarketData\BookKeeperFactory;
use Kobens\Gemini\Api\WebSocket\OrderEvents\BookKeeper;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\Archive;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuyFilled;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuyPlaced;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuyReady;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuySent;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\SellFilled;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\SellPlaced;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\SellSent;

require \dirname(__DIR__).'/bootstrap.php';

try {
    $json = @\file_get_contents(\dirname(__DIR__).'/composer.json');
    if ($json === false) {
        throw new \Exception('Unable to read application\'s composer.json file.');
    }
    $composer = @\json_decode($json);
    if ($composer  === false) {
        throw new \Exception('Unable to parse application\'s composer.json file.');
    }
    unset($json);

} catch (\Exception $e) {
    echo \sprintf("Initialization Error: %s\n", $e->getMessage());
    exit(1);
}

$config = Config::getInstance();
$adapter = Db::getAdapter();
$connectionInterface = $adapter->getDriver()->getConnection();
$shutdownInterface = new EmergencyShutdown(\dirname(__DIR__).DIRECTORY_SEPARATOR.'var');
$exchangeInterface = new Exchange();

$hostInterface = new Host($config->get('gemini')->api->host);
$keyInterface = new Key(
    $config->get('gemini')->api->key->public_key,
    $config->get('gemini')->api->key->secret_key
);
$nonceInterface = new Nonce();

// TODO: Maybe use db user that only has rights to read/write on throttler table.
// NOTE: Throttlers intentionally use their own db connection so as to not have transactional
//       operations interfere with the rest of the application (BEGIN/COMMIT).
$publicThrottlerInterface = new Throttler(
    new MariaDb(new \Zend\Db\Adapter\Adapter($config->get('database')->toArray())),
    $hostInterface->getHost().'::public'
);
$privateThrottlerInterface = new Throttler(
    new MariaDb(new \Zend\Db\Adapter\Adapter($config->get('database')->toArray())),
    $hostInterface->getHost().'::private'
);

$tickerInterface = new Ticker($hostInterface, $publicThrottlerInterface);

$getPriceInterface = new GetPrice($exchangeInterface, $tickerInterface);

$fillOrKillInterface = new FillOrKill($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$forceMakerInterface = new ForceMaker($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface, $getPriceInterface);
$immediateOrCancelInterface = new ImmediateOrCancel($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$stopLimitInterface = new StopLimit($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$limitInterface = new Limit($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$makerOrCancelInterface = new MakerOrCancel($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);

$cancelAllActiveOrdersInterface = new CancelAllActiveOrders($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$cancelOrderInterface = new CancelOrder($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$getPastTradesInterface = new GetPastTrades($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$getActiveOrdersInterface = new GetActiveOrders($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$getAvailableBalancesInterface = new GetAvailableBalances($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$orderStatusInterface = new OrderStatus($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);
$getNotationalVolumeInterface = new GetNotationalVolume($hostInterface, $privateThrottlerInterface, $keyInterface, $nonceInterface);

$archiveInterface = new Archive();
$buyFilledInterface = new BuyFilled($adapter);
$buyPlacedInterface = new BuyPlaced($adapter);
$buyReadyInterface = new BuyReady($adapter);
$buySentInterface = new BuySent($adapter);
$sellFilledInterface = new SellFilled($adapter);
$sellPlacedInterface = new SellPlaced($adapter);
$sellSentInterface = new SellSent($adapter);


$app = new \Symfony\Component\Console\Application($composer->name, $composer->version);

// TODO: All TradeRepeater classes will need to use Kobens\Gemini\Api\Rest\* objects that have their own KeyInterface per TradeRepeater to avoid Nonce clashing
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Buyer(
    $shutdownInterface,
    $buyReadyInterface,
    $buySentInterface,
    new ForceMaker(
        $hostInterface,
        $privateThrottlerInterface,
        new Key(
            $config->get('gemini')->keys->trade_repeater->buyer->public,
            $config->get('gemini')->keys->trade_repeater->buyer->secret
        ),
        $nonceInterface,
        $getPriceInterface
    )
));

$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor\WebSocket(
    $shutdownInterface,
    $hostInterface,
    new Key(
        $config->get('gemini')->keys->trade_repeater->fill_monitor_websocket->public,
        $config->get('gemini')->keys->trade_repeater->fill_monitor_websocket->secret
    ),
    $nonceInterface,
    $buyPlacedInterface,
    $sellPlacedInterface
));

$restFillMonitorKey = new Key(
    $config->get('gemini')->keys->trade_repeater->fill_monitor_rest->public,
    $config->get('gemini')->keys->trade_repeater->fill_monitor_rest->secret
);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor\Rest(
    $shutdownInterface,
    $buyPlacedInterface,
    $sellPlacedInterface,
    new GetActiveOrders($hostInterface, $privateThrottlerInterface, $restFillMonitorKey, $nonceInterface),
    new OrderStatus($hostInterface, $privateThrottlerInterface, $restFillMonitorKey, $nonceInterface)
));
unset($restFillMonitorKey);

$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Seller(
    $shutdownInterface,
    $buyFilledInterface,
    $sellSentInterface,
    new ForceMaker(
        $hostInterface,
        $privateThrottlerInterface,
        new Key(
            $config->get('gemini')->keys->trade_repeater->seller->public,
            $config->get('gemini')->keys->trade_repeater->seller->secret
        ),
        $nonceInterface,
        $getPriceInterface
    )
));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Archiver(
    $shutdownInterface,
    $sellFilledInterface,
    $archiveInterface,
    $connectionInterface
));

$sellAuditorKey = new Key(
    $config->get('gemini')->keys->trade_repeater->auditor_sell_price->public,
    $config->get('gemini')->keys->trade_repeater->auditor_sell_price->secret
);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Auditor\SellPrice(
    $shutdownInterface,
    $sellPlacedInterface,
    $getPriceInterface,
    new OrderStatus(
        $hostInterface,
        $privateThrottlerInterface,
        $sellAuditorKey,
        $nonceInterface
    ),
    new CancelOrder($hostInterface, $privateThrottlerInterface, $sellAuditorKey, $nonceInterface),
    $adapter
));
unset($sellAuditorKey);


// $app->add(new \Kobens\Gemini\Command\Command\Taxes\CapitalGains()); // @deprecated
$app->add(new \Kobens\Gemini\Command\Command\Taxes\BuyLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\SellLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\Form8949());

$app->add(new \Kobens\Gemini\Command\Command\Market\BookKeeper(
    new BookKeeperFactory($exchangeInterface, Cache::getInstance()),
    $config
));
$app->add(new \Kobens\Gemini\Command\Command\Market\Ticker($tickerInterface));
$app->add(new \Kobens\Gemini\Command\Command\Market\Watcher($exchangeInterface, $hostInterface));

// TODO: Use Auditor Key
$app->add(new \Kobens\Gemini\Command\Command\FeeAndVolume\GetNotationalVolume($getNotationalVolumeInterface));

// TODO: This Command should use a unique KeyInterface, with no Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\BookKeeper(
    new BookKeeper($hostInterface, $nonceInterface, $keyInterface, Cache::getInstance())
));

// TODO: This Command should use a unique KeyInterface, with no Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\Logger\TradeHistory($getPastTradesInterface, $shutdownInterface));


// TODO: The following commands can use a common KeyInterface, with Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\CancelOrder($cancelOrderInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\CancelAllActive($cancelAllActiveOrdersInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\FillOrKill($fillOrKillInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\ForceMaker($forceMakerInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\ImmediateOrCancel($immediateOrCancelInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\StopLimit($stopLimitInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\Limit($limitInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\MakerOrCancel($makerOrCancelInterface));

// TODO: The following commands can use a common KeyInterface, and should have no Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\Funds\GetAvailableBalances($getAvailableBalancesInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\GetActiveOrders($hostInterface, $getActiveOrdersInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\GetPastTrades($getPastTradesInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\OrderStatus($orderStatusInterface));

$app->run();
