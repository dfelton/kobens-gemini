#!/usr/bin/env php
<?php

require \dirname(__DIR__).'/vendor/autoload.php';

use Kobens\Core\Config;
use Kobens\Exchange\Exchange\Mapper;
use Kobens\Gemini\Exchange;
use Symfony\Component\Console\Application;

try {
    $config = Config::getInstance();
    $config->setConfig(\dirname(__DIR__).'/env/config.xml');
    $config->setRootDir(\dirname(__DIR__));

    $phpSettings = $config->get('php');
    if ($phpSettings) {
        if ($phpSettings->get('timezone')) {
            \date_default_timezone_set((string) $phpSettings->get('timezone'));
        }
    }
    unset($config);

    // Init Exchange Mapper (todo: may not be necessary if we're scrapping kobens-exchange's trade-repeater)
    new Mapper(['gemini' => Exchange::class]);

    $json = @\file_get_contents(\dirname(__DIR__).'/composer.json');
    if ($json === false) {
        throw new \Exception('Unable to read application\'s composer.json file.');
    }
    $composer = @\json_decode($json);
    if ($composer  === false) {
        throw new \Exception('Unable to parse application\'s composer.json file.');
    }
    unset($json);

} catch (\Exception $e) {
    exit("Initialization Error: {$e->getMessage()}" . PHP_EOL);
}

$app = new Application($composer->name, $composer->version);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Buyer());
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor());
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Seller());
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Archiver());
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Repairer());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\Calculator\CostBasisLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\Calculator\Form8949());
$app->add(new \Kobens\Gemini\Command\Command\Market\BookKeeper());
$app->add(new \Kobens\Gemini\Command\Command\Market\Ticker());
$app->add(new \Kobens\Gemini\Command\Command\Market\Watcher());
$app->add(new \Kobens\Gemini\Command\Command\Order\BookKeeper());
$app->add(new \Kobens\Gemini\Command\Command\Order\Logger\TradeHistory());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\Cancel());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\CancelAll());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\NewOrder());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\ForceMaker());
$app->add(new \Kobens\Gemini\Command\Command\Order\Status\ActiveOrders());
$app->add(new \Kobens\Gemini\Command\Command\Order\Status\OrderStatus());
$app->add(new \Kobens\Gemini\Command\Command\Order\Status\PastTrades());
$app->run();
