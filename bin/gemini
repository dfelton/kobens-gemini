#!/usr/bin/env php
<?php

declare(strict_types=1);

require dirname(__DIR__) . '/vendor/autoload.php';

use Kobens\Core\Cache;
use Kobens\Core\Config;
use Kobens\Core\Db;
use Kobens\Core\EmergencyShutdown;
use Kobens\Core\ErrorHandler;
use Kobens\Core\Sleeper;
use Kobens\Core\Http\Request\Throttler;
use Kobens\Core\Http\Request\Throttler\Adapter\MariaDb;
use Kobens\Gemini\Exchange;
use Kobens\Gemini\Api\Host;
use Kobens\Gemini\Api\Key;
use Kobens\Gemini\Api\Nonce;
use Kobens\Gemini\Api\Market\GetPrice;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\FeeAndVolume\GetNotionalVolume;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\FundManagement\GetAvailableBalances;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\FundManagement\GetNotionalBalances;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\CancelAllActiveOrders;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\CancelOrder;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\FillOrKill;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\ForceMaker;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\ImmediateOrCancel;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\Limit;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\MakerOrCancel;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderPlacement\NewOrder\StopLimit;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderStatus\GetActiveOrders;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderStatus\GetPastTrades;
use Kobens\Gemini\Api\Rest\PrivateEndpoints\OrderStatus\OrderStatus;
use Kobens\Gemini\Api\Rest\PublicEndpoints\Ticker;
use Kobens\Gemini\Api\WebSocket\MarketData\BookKeeperFactory;
use Kobens\Gemini\Api\WebSocket\OrderEvents\BookKeeper;
use Kobens\Gemini\Exchange\Order\Fee\ApiMakerHoldBps;
use Kobens\Gemini\TradeRepeater\PricePointGenerator;
use Kobens\Gemini\TradeRepeater\CliMonitor\Profits;
use Kobens\Gemini\TradeRepeater\CliMonitor\Helper\Data;
use Kobens\Gemini\TradeRepeater\Model\GetRecordId;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade as TradeResource;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Update;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\Archive;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuyFilled;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuyPlaced;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuyReady;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\BuySent;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\SellFilled;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\SellPlaced;
use Kobens\Gemini\TradeRepeater\Model\Resource\Trade\Action\SellSent;
use Kobens\Gemini\TradeRepeater\Model\Trade\AddAmount;
use Kobens\Gemini\TradeRepeater\Model\Trade\ShouldResetBuy;
use Kobens\Gemini\TradeRepeater\Model\Trade\Profits\Bucket;
use Kobens\Gemini\TradeRepeater\Model\Trade\Profits\Processor;
use Kobens\Gemini\TradeRepeater\Model\Trade\Profits\Processor\ReInvest;
use Zend\Db\TableGateway\TableGateway;

error_reporting(E_ALL | E_STRICT);
set_error_handler([new ErrorHandler(), 'handler']);

try {
    $config = \Kobens\Core\Config::getInstance();
    $config->setConfig(dirname(__DIR__) . '/env/config.xml');
    $config->setRootDir(dirname(__DIR__));

    $phpSettings = $config->get('php');
    if ($phpSettings) {
        if ($phpSettings->get('timezone')) {
            \date_default_timezone_set((string) $phpSettings->get('timezone'));
        }
    }
    unset ($config, $phpSettings);

    // Init Exchange Mapper (todo: may not be necessary if we're scrapping kobens-exchange's trade-repeater)
    new \Kobens\Exchange\Exchange\Mapper(['gemini' => \Kobens\Gemini\Exchange::class]);

    $json = @\file_get_contents(\dirname(__DIR__) . '/composer.json');
    if ($json === false) {
        throw new \Exception('Unable to read application\'s composer.json file.');
    }
    $composer = json_decode($json, false, 512, JSON_THROW_ON_ERROR);
    unset($json);
} catch (\Throwable $e) {
    echo \sprintf(
        "Initialization Error\nError Message: %s\nError Code: %d\nStack Trace: %s\n",
        $e->getMessage(),
        $e->getCode(),
        $e->getTraceAsString()
    );
    echo
    exit(1);
}

$config = Config::getInstance();
$adapter = Db::getAdapter();
$connectionInterface = $adapter->getDriver()->getConnection();
$shutdownInterface = new EmergencyShutdown(\dirname(__DIR__) . DIRECTORY_SEPARATOR . 'var');
$exchangeInterface = new Exchange();
$sleeperInterface = new Sleeper();

$hostInterface = new Host($config->get('gemini')->api->host);
$keyInterface = new Key(
    $config->get('gemini')->api->key->public_key,
    $config->get('gemini')->api->key->secret_key
);
$nonceInterface = new Nonce();

// TODO: Maybe use db user that only has rights to read/write on throttler table.
// NOTE: Throttlers intentionally use their own db connection so as to not have transactional
//       operations interfere with the rest of the application (BEGIN/COMMIT).
//       Also so multiple instances of application can share throttling if desired.

$publicThrottlerInterface = new Throttler(
    new MariaDb(new \Zend\Db\Adapter\Adapter($config->get('kobens')->core->throttler->adapter->mariadb->toArray())),
    $hostInterface->getHost() . '::public'
);
$privateThrottlerInterface = new Throttler(
    new MariaDb(new \Zend\Db\Adapter\Adapter($config->get('kobens')->core->throttler->adapter->mariadb->toArray())),
    $hostInterface->getHost() . '::private'
);

$logger = new \Monolog\Logger('curl');
$logger->pushHandler(new \Monolog\Handler\StreamHandler($config->getLogDir() . '/curl.log'));
$curlInterface = new \Kobens\Core\Http\Curl($logger);

$logger = new \Monolog\Logger('request.public');
$logger->pushHandler(new \Monolog\Handler\StreamHandler($config->getLogDir() . '/request.public.log'));

$publicRequestInterface = new \Kobens\Gemini\Api\Rest\PublicEndpoints\Request(
    $hostInterface,
    $publicThrottlerInterface,
    $curlInterface,
    $logger
);

$loggerRequestPrivate = new \Monolog\Logger('request.private');
$loggerRequestPrivate->pushHandler(new \Monolog\Handler\StreamHandler($config->getLogDir() . '/request.private.log'));

$privateRequestInterface = new \Kobens\Gemini\Api\Rest\PrivateEndpoints\Request(
    $hostInterface,
    $privateThrottlerInterface,
    $keyInterface,
    $nonceInterface,
    $curlInterface,
    $loggerRequestPrivate
);

$tickerInterface = new Ticker($publicRequestInterface);

$getPriceInterface = new GetPrice($exchangeInterface, $tickerInterface);

$fillOrKillInterface = new FillOrKill($privateRequestInterface);
$forceMakerInterface = new ForceMaker($privateRequestInterface, $getPriceInterface);
$immediateOrCancelInterface = new ImmediateOrCancel($privateRequestInterface);
$stopLimitInterface = new StopLimit($privateRequestInterface);
$limitInterface = new Limit($privateRequestInterface);
$makerOrCancelInterface = new MakerOrCancel($privateRequestInterface);

$cancelAllActiveOrdersInterface = new CancelAllActiveOrders($privateRequestInterface);
$cancelOrderInterface = new CancelOrder($privateRequestInterface);
$getPastTradesInterface = new GetPastTrades($privateRequestInterface);
$getActiveOrdersInterface = new GetActiveOrders($privateRequestInterface);
$getAvailableBalancesInterface = new GetAvailableBalances($privateRequestInterface);
$getNotionalBalancesInterface = new GetNotionalBalances($privateRequestInterface);
$orderStatusInterface = new OrderStatus($loggerRequestPrivate, $privateRequestInterface);
$getNotionalVolumeInterface = new GetNotionalVolume($privateRequestInterface);
$getTradeVolumeInterface = new \Kobens\Gemini\Api\Rest\PrivateEndpoints\FeeAndVolume\GetTradeVolume($privateRequestInterface);

$tradeResource = new TradeResource($adapter);
$updateTrade = new Update($adapter);


// $stmt = $adapter->query('SELECT id, buy_amount FROM trade_repeater WHERE `symbol` = "renusd"');
// $result = $stmt->execute();
// var_dump($result->count());
// foreach ($result as $row) {
//     $amount = explode('.', $row['buy_amount']);
//     $length = strlen($amount[1]);
//     if ($length === 7) {
//         $newValue = $amount[0] . '.' . substr($amount[1], 0, 6);
//         $updateTrade->setData(['buy_amount' => $newValue], (int) $row['id']);
//         echo $row['id'], "\n";
//     }

// }
// exit;


$archiveInterface = new Archive();
$buyFilledInterface = new BuyFilled($adapter, $tradeResource);
$buyPlacedInterface = new BuyPlaced($adapter, $tradeResource);
$buyReadyInterface = new BuyReady($adapter, $tradeResource);
$buySentInterface = new BuySent($adapter, $tradeResource);
$sellFilledInterface = new SellFilled($adapter, $tradeResource);
$sellPlacedInterface = new SellPlaced($adapter, $tradeResource);
$sellSentInterface = new SellSent($adapter, $tradeResource);

$apiMakerHoldBps = new ApiMakerHoldBps();
$addAmount = new AddAmount($cancelOrderInterface, $getPriceInterface, $orderStatusInterface, $tradeResource, $adapter, $updateTrade);

$repeaterProfitsBucket = new Bucket($adapter);

$app = new \Symfony\Component\Console\Application($composer->name, $composer->version);
$app->add(new \Kobens\Gemini\Command\Command\Info\Pair());

// TODO: All TradeRepeater classes will need to use Kobens\Gemini\Api\Rest\* objects that have their own KeyInterface per TradeRepeater to avoid Nonce clashing
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\AddToPosition($addAmount, $repeaterProfitsBucket, $tradeResource));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\PricePointGenerator(
    new TableGateway('trade_repeater', $adapter),
    new PricePointGenerator($apiMakerHoldBps)
));

$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Buyer(
    $shutdownInterface,
    $buyReadyInterface,
    $buySentInterface,
    new ForceMaker(
        new \Kobens\Gemini\Api\Rest\PrivateEndpoints\Request(
            $hostInterface,
            $privateThrottlerInterface,
            new Key(
                $config->get('gemini')->keys->trade_repeater->buyer->public,
                $config->get('gemini')->keys->trade_repeater->buyer->secret
            ),
            $nonceInterface,
            $curlInterface,
            $loggerRequestPrivate
        ),
        $getPriceInterface
    ),
    $sleeperInterface
));

$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor\WebSocket(
    $shutdownInterface,
    $hostInterface,
    new Key(
        $config->get('gemini')->keys->trade_repeater->fill_monitor_websocket->public,
        $config->get('gemini')->keys->trade_repeater->fill_monitor_websocket->secret
    ),
    $nonceInterface,
    $buyPlacedInterface,
    $sellPlacedInterface,
    $sleeperInterface,
    new GetRecordId()
));

$restFillMonitorKey = new Key(
    $config->get('gemini')->keys->trade_repeater->fill_monitor_rest->public,
    $config->get('gemini')->keys->trade_repeater->fill_monitor_rest->secret
);

$restFillMonitorRequestInterface = new \Kobens\Gemini\Api\Rest\PrivateEndpoints\Request(
    $hostInterface,
    $privateThrottlerInterface,
    $restFillMonitorKey,
    $nonceInterface,
    $curlInterface,
    $loggerRequestPrivate
);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor\Rest(
    $shutdownInterface,
    $buyPlacedInterface,
    $sellPlacedInterface,
    new GetActiveOrders($restFillMonitorRequestInterface),
    new OrderStatus($loggerRequestPrivate, $restFillMonitorRequestInterface),
    $sleeperInterface
));
unset($restFillMonitorKey, $restFillMonitorRequestInterface);

$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Seller(
    $shutdownInterface,
    $buyFilledInterface,
    $sellSentInterface,
    new ForceMaker(
        new \Kobens\Gemini\Api\Rest\PrivateEndpoints\Request(
            $hostInterface,
            $privateThrottlerInterface,
            new Key(
                $config->get('gemini')->keys->trade_repeater->seller->public,
                $config->get('gemini')->keys->trade_repeater->seller->secret
            ),
            $nonceInterface,
            $curlInterface,
            $loggerRequestPrivate
        ),
        $getPriceInterface
    ),
    $sleeperInterface
));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Archiver(
    $shutdownInterface,
    $sellFilledInterface,
    $archiveInterface,
    $connectionInterface,
    $sleeperInterface,
    new Processor(
        new ReInvest($updateTrade),
        $repeaterProfitsBucket
//         new TopWeekly($addAmount, $adapter, new RequiredQuote($apiMakerHoldBps), $shutdownInterface)
    )
));

$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Archiver\SetFillTimestamp($adapter, $sleeperInterface, $shutdownInterface));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Disable($orderStatusInterface, $cancelOrderInterface, $adapter, $tradeResource, $shutdownInterface, $getPriceInterface, $updateTrade));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Stats\DailyProfit($adapter, $sleeperInterface, $shutdownInterface));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Stats\SevenDayAggregate(
    new \Kobens\Gemini\TradeRepeater\Stats\SevenDayAggregate\Updater($adapter)
));


$sellAuditorKey = new Key(
    $config->get('gemini')->keys->trade_repeater->auditor_sell_price->public,
    $config->get('gemini')->keys->trade_repeater->auditor_sell_price->secret
);
$sellAuditorRequestInterface = new \Kobens\Gemini\Api\Rest\PrivateEndpoints\Request(
    $hostInterface,
    $privateThrottlerInterface,
    $sellAuditorKey,
    $nonceInterface,
    $curlInterface,
    $loggerRequestPrivate
);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Auditor\SellPrice(
    $shutdownInterface,
    $sellPlacedInterface,
    $getPriceInterface,
    new OrderStatus($loggerRequestPrivate, $sellAuditorRequestInterface),
    new CancelOrder($sellAuditorRequestInterface),
    $adapter,
    $sleeperInterface
));
unset($sellAuditorKey, $sellAuditorRequestInterface);


$buyAuditorKey = new Key(
    $config->get('gemini')->keys->trade_repeater->auditor_buy_price->public,
    $config->get('gemini')->keys->trade_repeater->auditor_buy_price->secret
);
$buyAuditorRequestInterface = new \Kobens\Gemini\Api\Rest\PrivateEndpoints\Request(
    $hostInterface,
    $privateThrottlerInterface,
    $buyAuditorKey,
    $nonceInterface,
    $curlInterface,
    $loggerRequestPrivate
);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Auditor\BuyPrice(
    $shutdownInterface,
    $buyPlacedInterface,
    $getPriceInterface,
    new OrderStatus($loggerRequestPrivate, $buyAuditorRequestInterface),
    new CancelOrder($buyAuditorRequestInterface),
    $adapter,
    $sleeperInterface,
    new ShouldResetBuy($orderStatusInterface, $getPriceInterface)
));
unset($buyAuditorKey, $buyAuditorRequestInterface);

// Repeater CLI Monitoring
$data = new Data(
    $getActiveOrdersInterface,
    $getNotionalBalancesInterface,
    $getPriceInterface,
    new TableGateway('trade_repeater', $adapter),
    $adapter
);
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\CliMonitor\Account($data, $sleeperInterface, new Profits($adapter, $getPriceInterface), $adapter));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\CliMonitor\Pair($data, $sleeperInterface));
unset($data);

// $app->add(new \Kobens\Gemini\Command\Command\Taxes\CapitalGains()); // @deprecated
$app->add(new \Kobens\Gemini\Command\Command\Taxes\BuyLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\SellLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\Form8949());

$app->add(new \Kobens\Gemini\Command\Command\Market\BookKeeper(
    new BookKeeperFactory($exchangeInterface, Cache::getInstance()),
    $config
));
$app->add(new \Kobens\Gemini\Command\Command\Market\Ticker($tickerInterface));
$app->add(new \Kobens\Gemini\Command\Command\Market\Watcher($exchangeInterface, $hostInterface));

// TODO: Use Auditor Key
$app->add(new \Kobens\Gemini\Command\Command\FeeAndVolume\GetNotionalVolume($getNotionalVolumeInterface));
$app->add(new \Kobens\Gemini\Command\Command\FeeAndVolume\GetTradeVolume($getTradeVolumeInterface));

// TODO: This Command should use a unique KeyInterface, with no Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\BookKeeper(
    new BookKeeper($hostInterface, $nonceInterface, $keyInterface, Cache::getInstance())
));

// TODO: This Command should use a unique KeyInterface, with no Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\Logger\TradeHistory($getPastTradesInterface, $shutdownInterface, $sleeperInterface, $adapter));


// TODO: The following commands can use a common KeyInterface, with Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\CancelOrder($cancelOrderInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\CancelAllActive($cancelAllActiveOrdersInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\FillOrKill($fillOrKillInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\ForceMaker($forceMakerInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\ImmediateOrCancel($immediateOrCancelInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\StopLimit($stopLimitInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\Limit($limitInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderPlacement\NewOrder\MakerOrCancel($makerOrCancelInterface));

// TODO: The following commands can use a common KeyInterface, and should have no Trading Authority
$app->add(new \Kobens\Gemini\Command\Command\Funds\GetAvailableBalances($getAvailableBalancesInterface));
$app->add(new \Kobens\Gemini\Command\Command\Funds\GetNotionalBalances($getNotionalBalancesInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\GetActiveOrders($hostInterface, $getActiveOrdersInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\GetPastTrades($getPastTradesInterface));
$app->add(new \Kobens\Gemini\Command\Command\OrderStatus\OrderStatus($orderStatusInterface));

$app->run();
