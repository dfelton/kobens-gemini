#!/usr/bin/env php
<?php

require \dirname(__DIR__).'/vendor/autoload.php';

use Kobens\Core\Config;
use Kobens\Core\Http\Request\Throttler;
use Kobens\Exchange\Command\Command\SimpleTrader\{
    OrderPlacer as SimpleTraderOrderPlacer,
    Monitor as SimpleTraderOrderMonitor
};
use Kobens\Exchange\Exchange\Mapper;
use Kobens\Gemini\Exchange;
use Kobens\Gemini\Command\Command\Market\{BookKeeper as MarketBookKeeper, Watcher};
use Kobens\Gemini\Command\Command\Order\BookKeeper as OrderBookKeeper;
use Kobens\Gemini\Command\Command\Order\Placement\{Cancel, CancelAll, NewOrder};
use Kobens\Gemini\Command\Command\Order\Status\{ActiveOrders, OrderStatus};
use Symfony\Component\Console\Application;

try {
    new Config(\dirname(__DIR__).'/env/config.xml', \dirname(__DIR__));
    new Mapper(['gemini' => Exchange::class]);
    // Limit is actually 6. So up to 2 concurrent REST loop threads running,
    // while slipping in a manual request here or there.
    // Embracing websockets and local cache more will be future goals.
    (new Throttler())->addThrottle('gemini', 3);
} catch (Exception $e) {
    exit(\sprintf('Initialization Error: %s', $e->getMessage()));
}

$application = new Application();

$application->add(new ActiveOrders());
$application->add(new Cancel());
$application->add(new CancelAll());
$application->add(new MarketBookKeeper());
$application->add(new NewOrder());
$application->add(new OrderBookKeeper());
$application->add(new OrderStatus());
$application->add(new SimpleTraderOrderMonitor());
$application->add(new SimpleTraderOrderPlacer());
$application->add(new Watcher());

$application->run();

