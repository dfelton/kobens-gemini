#!/usr/bin/env php
<?php

require \dirname(__DIR__).'/vendor/autoload.php';

use Kobens\Core\Config;
use Kobens\Core\Http\Request\Throttler;
use Kobens\Exchange\Exchange\Mapper;
use Kobens\Gemini\Exchange;
use Kobens\Gemini\Command\Command\TradeRepeater\{
    Buyer as TradeRepeaterBuyer,
    FillMonitor as TradeRepeaterFillMonitor,
    Seller as TradeRepeaterSeller,
    Archiver as TradeRepeaterArchiver,
    Repairer as TradeRepeaterRepairer
};
use Kobens\Gemini\Command\Command\Market\{
    BookKeeper as MarketBookKeeper,
    Watcher    as MarketWatcher
};
use Kobens\Gemini\Command\Command\Order\BookKeeper as OrderBookKeeper;
use Kobens\Gemini\Command\Command\Order\Placement\{
    Cancel    as OrderCancel,
    CancelAll as OrderCancelAll,
    NewOrder  as OrderNew
};
use Kobens\Gemini\Command\Command\Order\Status\{
    ActiveOrders as OrderListActive,
    OrderStatus
};
use Symfony\Component\Console\Application;

try {
    $dir = \dirname(__DIR__);
    Config::getInstance()->initialize($dir . '/env/config.xml', $dir);
    new Mapper(['gemini' => Exchange::class]);
    // Limit is actually 6. So up to 2 concurrent REST loop threads running,
    // while slipping in a manual request here or there.
    // Embracing websockets and local cache more will be future goals.
    (new Throttler())->addThrottle('gemini', 3);

    if (false === $json = @\file_get_contents($dir.'/composer.json')) {
        throw new \RuntimeException('Unable to read application\'s composer.json file.');
    }
    if (false === $composer = \json_decode($json, false)) {
        throw new \UnexpectedValueException('Unable to parse application\'s composer.json file.');
    }
    unset($json);
} catch (\Exception $e) {
    exit("Initialization Error: {$e->getMessage()}" . PHP_EOL);
}

$app = new Application($composer->name, $composer->version);
$app->add(new MarketBookKeeper());
$app->add(new MarketWatcher());
$app->add(new OrderBookKeeper());
$app->add(new OrderCancel());
$app->add(new OrderCancelAll());
$app->add(new OrderListActive());
$app->add(new OrderNew());
$app->add(new OrderStatus());
$app->add(new TradeRepeaterBuyer());
$app->add(new TradeRepeaterFillMonitor());
$app->add(new TradeRepeaterSeller());
$app->add(new TradeRepeaterArchiver());
$app->add(new TradeRepeaterRepairer());
$app->run();
