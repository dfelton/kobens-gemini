#!/usr/bin/env php
<?php

require \dirname(__DIR__).'/vendor/autoload.php';


use Kobens\Core\Config;
use Kobens\Exchange\Exchange\Mapper;
use Kobens\Gemini\Exchange;
use Kobens\Gemini\Command\Command\TradeRepeater\{
    Buyer as TradeRepeaterBuyer,
    FillMonitor as TradeRepeaterFillMonitor,
    Seller as TradeRepeaterSeller,
    Archiver as TradeRepeaterArchiver,
    Repairer as TradeRepeaterRepairer
};
use Kobens\Gemini\Command\Command\Market\{
    BookKeeper as MarketBookKeeper,
    Ticker     as MarketTicker,
    Watcher    as MarketWatcher
};
use Kobens\Gemini\Command\Command\Order\BookKeeper as OrderBookKeeper;
use Kobens\Gemini\Command\Command\Order\Placement\{
    Cancel     as OrderCancel,
    CancelAll  as OrderCancelAll,
    NewOrder   as OrderNew,
    ForceMaker as OrderForceMaker
};
use Kobens\Gemini\Command\Command\Order\Status\{
    ActiveOrders as OrderListActive,
    OrderStatus
};
use Symfony\Component\Console\Application;


try {
    new Config(\dirname(__DIR__).'/env/config.xml', \dirname(__DIR__));
    new Mapper(['gemini' => Exchange::class]);
    $json = @\file_get_contents(\dirname(__DIR__).'/composer.json');
    if ($json === false) {
        throw new \Exception('Unable to read application\'s composer.json file.');
    }
    $composer = @\json_decode($json);
    if ($composer  === false) {
        throw new \Exception('Unable to parse application\'s composer.json file.');
    }
    unset($json);
} catch (\Exception $e) {
    exit("Initialization Error: {$e->getMessage()}");
}

$app = new Application($composer->name, $composer->version);
$app->add(new MarketBookKeeper());
$app->add(new MarketTicker());
$app->add(new MarketWatcher());
$app->add(new OrderBookKeeper());
$app->add(new OrderCancel());
$app->add(new OrderCancelAll());
$app->add(new OrderListActive());
$app->add(new OrderForceMaker());
$app->add(new OrderNew());
$app->add(new OrderStatus());
$app->add(new TradeRepeaterBuyer());
$app->add(new TradeRepeaterFillMonitor());
$app->add(new TradeRepeaterSeller());
$app->add(new TradeRepeaterArchiver());
$app->add(new TradeRepeaterRepairer());
$app->run();
