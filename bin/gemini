#!/usr/bin/env php
<?php

use Kobens\Core\Config;
use Kobens\Core\Db;
use Kobens\Core\EmergencyShutdown;
use Kobens\Gemini\Api\Key;
use Kobens\Gemini\Api\Nonce;
use Kobens\Gemini\Api\Rest\Request\Order\Status\ActiveOrders;
use Kobens\Gemini\TradeRepeater\DataResource\Archive;
use Kobens\Gemini\TradeRepeater\DataResource\BuyFilled;
use Kobens\Gemini\TradeRepeater\DataResource\BuyPlaced;
use Kobens\Gemini\TradeRepeater\DataResource\BuyReady;
use Kobens\Gemini\TradeRepeater\DataResource\BuySent;
use Kobens\Gemini\TradeRepeater\DataResource\SellFilled;
use Kobens\Gemini\TradeRepeater\DataResource\SellPlaced;
use Kobens\Gemini\TradeRepeater\DataResource\SellSent;

require \dirname(__DIR__).'/bootstrap.php';

try {
    $json = @\file_get_contents(\dirname(__DIR__).'/composer.json');
    if ($json === false) {
        throw new \Exception('Unable to read application\'s composer.json file.');
    }
    $composer = @\json_decode($json);
    if ($composer  === false) {
        throw new \Exception('Unable to parse application\'s composer.json file.');
    }
    unset($json);

} catch (\Exception $e) {
    echo \sprintf("Initialization Error: %s\n", $e->getMessage());
    exit(1);
}

$config = Config::getInstance();
$shutdownInterface = new EmergencyShutdown($config);
$keyInterface = new Key();
$nonceInterface = new Nonce();
$archiveInterface = new Archive();
$activeOrdersInterface = new ActiveOrders();
$buyFilledInterface = new BuyFilled();
$buyPlacedInterface = new BuyPlaced();
$buyReadyInterface = new BuyReady();
$buySentInterface = new BuySent();
$sellFilledInterface = new SellFilled();
$sellPlacedInterface = new SellPlaced();
$sellSentInterface = new SellSent();
$connectionInterface = Db::getAdapter()->getDriver()->getConnection();

$app = new \Symfony\Component\Console\Application($composer->name, $composer->version);
$app->add(new \Kobens\Gemini\Command\Command\Funds\GetAvailableBalances());
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Buyer(
    $shutdownInterface,
    $buyReadyInterface,
    $buySentInterface
));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor(
    $buyFilledInterface,
    $sellFilledInterface,
    $nonceInterface,
    $keyInterface,
    $shutdownInterface
));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\FillMonitor\Rest(
    $shutdownInterface,
    $activeOrdersInterface,
    $buyPlacedInterface,
    $sellPlacedInterface
));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Seller(
    $buyFilledInterface,
    $sellSentInterface,
    $shutdownInterface
));
$app->add(new \Kobens\Gemini\Command\Command\TradeRepeater\Archiver(
    $archiveInterface,
    $sellFilledInterface,
    $shutdownInterface,
    $connectionInterface
));
$app->add(new \Kobens\Gemini\Command\Command\Taxes\BuyLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\SellLogger());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\CapitalGains());
$app->add(new \Kobens\Gemini\Command\Command\Taxes\Form8949());
$app->add(new \Kobens\Gemini\Command\Command\Market\BookKeeper());
$app->add(new \Kobens\Gemini\Command\Command\Market\Ticker());
$app->add(new \Kobens\Gemini\Command\Command\Market\Watcher());
$app->add(new \Kobens\Gemini\Command\Command\Order\BookKeeper());
$app->add(new \Kobens\Gemini\Command\Command\Order\Logger\CheckLength());
$app->add(new \Kobens\Gemini\Command\Command\Order\Logger\TradeHistory());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\Cancel());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\CancelAll());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\NewOrder());
$app->add(new \Kobens\Gemini\Command\Command\Order\Placement\ForceMaker());
$app->add(new \Kobens\Gemini\Command\Command\Order\Status\ActiveOrders());
$app->add(new \Kobens\Gemini\Command\Command\Order\Status\OrderStatus());
$app->add(new \Kobens\Gemini\Command\Command\Order\Status\PastTrades());
$app->run();
